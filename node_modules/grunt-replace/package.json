{
  "name": "grunt-replace",
  "description": "Replace text patterns with applause.",
  "version": "0.9.3",
  "homepage": "http://github.com/outaTiME/grunt-replace",
  "author": {
    "name": "outaTiME",
    "url": "http://outa.im/"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/outaTiME/grunt-replace.git"
  },
  "bugs": {
    "url": "http://github.com/outaTiME/grunt-replace/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/outaTiME/grunt-replace/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "release": "scripts/release.sh",
    "test": "grunt test"
  },
  "dependencies": {
    "chalk": "^1.0.0",
    "lodash": "^3.1.0",
    "applause": "0.4.3"
  },
  "devDependencies": {
    "grunt": "^0.4.0",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-jshint": "^0.11.0",
    "grunt-mocha-test": "^0.12.0",
    "grunt-contrib-watch": "^0.6.0"
  },
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "replace",
    "replacement",
    "pattern",
    "patterns",
    "match",
    "text",
    "string",
    "regex",
    "regexp",
    "json",
    "yaml",
    "cson",
    "flatten"
  ],
  "files": [
    "tasks",
    "LICENSE-MIT"
  ],
  "readme": "# grunt-replace [![Build Status](https://secure.travis-ci.org/outaTiME/grunt-replace.png?branch=master)](http://travis-ci.org/outaTiME/grunt-replace)\n\n> Replace text patterns with [applause](https://github.com/outaTiME/applause).\n\n\n\n## Install\n\nFrom NPM:\n\n```shell\nnpm install grunt-replace --save-dev\n```\n\n## Replace Task\n\nAssuming installation via NPM, you can use `grunt-replace` in your gruntfile like this:\n\n```javascript\nmodule.exports = function (grunt) {\n  grunt.loadNpmTasks('grunt-replace');\n  grunt.initConfig({\n    replace: {\n      dist: {\n        options: {\n          patterns: [\n            {\n              match: 'foo',\n              replacement: 'bar'\n            }\n          ]\n        },\n        files: [\n          {expand: true, flatten: true, src: ['src/index.html'], dest: 'build/'}\n        ]\n      }\n    }\n  });\n  grunt.registerTask('default', 'replace');\n};\n```\n\n### Options\n\nfunction () {\n      var name = 'Applause Options';\n      return sections[name] || '_(Coming soon)_'; // empty\n    }\n\n#### excludeBuiltins\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, we exclude built-in matching rules.\n\n#### force\nType: `Boolean`\nDefault: `true`\n\nForce the copy of files even when those files don't have any match found for replacement.\n\n#### noProcess\nType: `String`\n\nThis option is an advanced way to control which file contents are processed.\n\n> `processContentExclude` has been renamed to `noProcess` and the option name will be removed in the future.\n\n#### encoding\nType: `String`\nDefault: `grunt.file.defaultEncoding`\n\nThe file encoding to copy files with.\n\n#### mode\nType: `Boolean` or `Number`\nDefault: `false`\n\nWhether to copy or set the existing file permissions. Set to `true` to copy the existing file permissions. Or set to the mode, i.e.: `0644`, that copied files will be set to.\n\n#### silent\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, removes the output from stdout.\n\n#### pedantic\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, the task will fail with a `grunt.fail.warn` when no matches are present.\n\n### Built-in Replacements\n\nFew matching rules are provided by default and can be used anytime (these will be affected by the `options` given):\n\n *  `__SOURCE_FILE__`:\n\n    Replace match with the source file.\n\n *  `__SOURCE_PATH__`:\n\n    Replace match with the path of source file.\n\n *  `__SOURCE_FILENAME__`:\n\n    Replace match with the filename of source file.\n\n *  `__TARGET_FILE__`:\n\n    Replace match with the target file.\n\n *  `__TARGET_PATH__`:\n\n    Replace match with the path of target file.\n\n *  `__TARGET_FILENAME__`:\n\n    Replace match with the filename of target file.\n\n> If you are looking how to use an `built-in` replacements, check out the [How to insert filename in target](#how-to-insert-filename-in-target) usage.\n\n### Usage Examples\n\n#### Basic\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\nGruntfile, define pattern (for timestamp) and the source files for lookup:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'timestamp',\n          replacement: '<%= grunt.template.today() %>'\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/manifest.appcache'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### Multiple matching\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\nFile `src/humans.txt`:\n\n```\n              __     _\n   _    _/__  /./|,//_`\n  /_//_// /_|///  //_, outaTiME v.@@version\n\n/* TEAM */\n  Web Developer / Graphic Designer: Ariel Oscar Falduto\n  Site: http://www.outa.im\n  Twitter: @outa7iME\n  Contact: afalduto at gmail dot com\n  From: Buenos Aires, Argentina\n\n/* SITE */\n  Last update: @@timestamp\n  Standards: HTML5, CSS3, robotstxt.org, humanstxt.org\n  Components: H5BP, Modernizr, jQuery, Twitter Bootstrap, LESS, Jade, Grunt\n  Software: Sublime Text 2, Photoshop, LiveReload\n\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'version',\n          replacement: '<%= pkg.version %>'\n        },\n        {\n          match: 'timestamp',\n          replacement: '<%= grunt.template.today() %>'\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/manifest.appcache', 'src/humans.txt'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### Cache busting\n\nFile `src/assets/index.html`:\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"/css/style.css?rel=@@timestamp\">\n  <script src=\"/js/app.js?rel=@@timestamp\"></script>\n</head>\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'timestamp',\n          replacement: '<%= new Date().getTime() %>'\n        }\n      ]\n    },\n    files: [\n      {src: ['src/assets/index.html'], dest: 'build/index.html'}\n    ]\n  }\n}\n```\n\n#### Include file\n\nFile `src/index.html`:\n\n```html\n<body>\n  @@include\n</body>\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'include',\n          replacement: '<%= grunt.file.read(\"includes/content.html\") %>'\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/index.html'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### Regular expression\n\nFile `src/username.txt`:\n\n```\nJohn Smith\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: /(\\w+)\\s(\\w+)/,\n          replacement: '$2, $1' // replaces \"John Smith\" to \"Smith, John\"\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/username.txt'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### Lookup for `foo` instead of `@@foo`\n\nGruntfile:\n\n```js\n// option 1 (explicitly using an regexp)\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: /foo/g,\n          replacement: 'bar'\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/foo.txt'], dest: 'build/'}\n    ]\n  }\n}\n\n// option 2 (easy way)\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'foo',\n          replacement: 'bar'\n        }\n      ],\n      usePrefix: false\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/foo.txt'], dest: 'build/'}\n    ]\n  }\n}\n\n// option 3 (old way)\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'foo',\n          replacement: 'bar'\n        }\n      ],\n      prefix: '' // remove prefix\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/foo.txt'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### How to insert filename in target\n\nFile `src/app.js`:\n\n```js\n// filename: @@__SOURCE_FILENAME__\n\nvar App = App || (function () {\n\n  return {\n\n    // app contents\n\n  };\n\n}());\n\nwindow.App = App;\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      // pass, we use built-in replacements\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/**/*.js'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n## Release History\n\n * 2015-08-06   v0.9.3   New pedantic option (thanks [@donkeybanana](https://github.com/donkeybanana)). Fix issue with special characters attributes ($$, $&, $`, $', $n or $nn) on JSON, YAML and CSON.\n * 2015-05-07   v0.9.2   Fix regression issue with empty string in replacement.\n * 2015-05-01   v0.9.1   Better output.\n * 2015-05-01   v0.9.0   Output available via --verbose flag. The mode option now also applies to directories. Fix path issue on Windows. Display warning message when no matches and overall of replacements. Update to [applause](https://github.com/outaTiME/applause) v0.4.0.\n * 2014-10-10   v0.8.0   Escape regexp when matching type is `String`.\n * 2014-08-26   v0.7.9   Fixes backwards incompatible changes introduced in NPM.\n * 2014-06-10   v0.7.8   Remove node v.8.0 support and third party dependencies updated. Force flag now are true by default.\n * 2014-04-20   v0.7.7   JSON / YAML / CSON as function supported. Readme updated (thanks [@milanlandaverde](https://github.com/milanlandaverde)).\n * 2014-03-23   v0.7.6   Readme updated.\n * 2014-03-22   v0.7.5   Modular core renamed to [applause](https://github.com/outaTiME/applause). Performance improvements. Expression flag removed. New pattern matching for CSON object. More test cases, readme updated and code cleanup.\n * 2014-03-21   v0.7.4   Test cases in Mocha, readme updated and code cleanup.\n * 2014-03-17   v0.7.3   Update script files for readme file generation.\n * 2014-03-12   v0.7.2   Typo error, replace task name again.\n * 2014-03-11   v0.7.1   Task name update.\n * 2014-03-11   v0.7.0   New [pattern-replace](https://github.com/outaTiME/pattern-replace) modular core for replacements.\n * 2014-02-13   v0.6.2   Attach process data for function replacements (source / target). Add delimiter option for object as replacement. Dependencies updated.\n * 2014-02-06   v0.6.1   Rename excludePrefix to preservePrefix (more readable) and adds usePrefix flag. Support the noProcess option like [grunt-contrib-copy](https://github.com/gruntjs/grunt-contrib-copy).\n * 2014-02-05   v0.6.0   Object replacement allowed. New excludePrefix flag (thanks [@shinnn](https://github.com/shinnn)). Encoding / Mode options added.\n * 2013-09-18   v0.5.1   New pattern matching for JSON object.\n * 2013-09-17   v0.5.0   Regular expression matching now supported and notation has been updated but is backward compatible.\n * 2013-05-03   v0.4.4   Fix escape $ before performing regexp replace (thanks [@warpech](https://github.com/warpech)).\n * 2013-04-14   v0.4.3   Detect path destinations correctly on Windows.\n * 2013-04-02   v0.4.2   Add peerDependencies and update description.\n * 2013-04-02   v0.4.1   Add trace when force flag.\n * 2013-02-28   v0.4.0   First official release for Grunt 0.4.0.\n * 2012-11-20   v0.3.2   New examples added.\n * 2012-09-25   v0.3.1   Rename grunt-contrib-lib dep to grunt-lib-contrib, add force flag.\n * 2012-09-25   v0.3.0   General cleanup and consolidation. Global options depreciated.\n\n---\n\nTask submitted by [Ariel Falduto](http://outa.im/)\n",
  "readmeFilename": "README.md",
  "_id": "grunt-replace@0.9.3",
  "dist": {
    "shasum": "d38b17914d6d9049e91377b5baaa93115d4688de"
  },
  "_from": "grunt-replace@^0.9.2",
  "_resolved": "https://registry.npmjs.org/grunt-replace/-/grunt-replace-0.9.3.tgz"
}
