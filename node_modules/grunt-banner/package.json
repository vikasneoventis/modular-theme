{
  "name": "grunt-banner",
  "description": "Adds a simple banner to files",
  "version": "0.4.0",
  "homepage": "https://github.com/mattstyles/grunt-banner",
  "author": {
    "name": "Matt Styles",
    "email": "matt@veryfizzyjelly.com",
    "url": "https://github.com/mattstyles"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mattstyles/grunt-banner.git"
  },
  "bugs": {
    "url": "https://github.com/mattstyles/grunt-banner/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/mattstyles/grunt-banner/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "files": [
    "tasks",
    "History.md",
    "LICENSE-MIT"
  ],
  "dependencies": {
    "chalk": "~1.0.0"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-copy": "~0.8.0",
    "grunt-contrib-jshint": "~0.11.2",
    "grunt-contrib-nodeunit": "~0.4.1",
    "load-grunt-tasks": "~3.1.0",
    "time-grunt": "~1.1.1"
  },
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "banner",
    "build"
  ],
  "readme": "# grunt-banner\n\n[![NPM version](https://img.shields.io/npm/v/grunt-banner.svg)](https://www.npmjs.com/package/grunt-banner)\n[![Build Status](https://img.shields.io/travis/mattstyles/grunt-banner/master.svg)](https://travis-ci.org/mattstyles/grunt-banner)\n[![Dependency Status](https://img.shields.io/david/mattstyles/grunt-banner.svg)](https://david-dm.org/mattstyles/grunt-banner#info=deependencies)\n[![peerDependency Status](https://img.shields.io/david/peer/mattstyles/grunt-banner.svg)](https://david-dm.org/mattstyles/grunt-banner#info=peerDependencies)\n[![devDependency Status](https://img.shields.io/david/dev/mattstyles/grunt-banner.svg)](https://david-dm.org/mattstyles/grunt-banner#info=devDependencies)\n\n> Adds a simple banner to files\n\n\n## Getting Started\n\nThis plugin requires Grunt `>=0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-banner --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-banner');\n```\n\nOr if you are using [matchdep](https://github.com/tkellen/node-matchdep) it will be included along with other `grunt-*` tasks by using this line of JavaScript:\n\n```js\nrequire('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);\n```\n\n\n## The \"usebanner\" task\n\n*grunt-banner renamed its task from `banner` to `usebanner` as a `banner` is often used to hold a banner template for a number of grunt plugins.*\n\n\n### Overview\n\nIn your project's Gruntfile, add a section named `usebanner` to the data object passed into `grunt.initConfig()`.\n\nThe wildcard selector `*` is perfectly valid for selecting targets to add a banner to.\n\n```js\ngrunt.initConfig({\n  usebanner: {\n    taskName: {\n      options: {\n        position: 'top',\n        banner: '// banner text <%= templates encouraged %>',\n        linebreak: true\n      },\n      files: {\n        src: [ 'path/to/file.ext', 'path/to/another/*.ext' ]\n      }\n    }\n  }\n})\n```\n\n\n### Options\n\n#### options.position\nType: `String`  \nDefault: `'top'`  \nValue range: `'top'` or `'bottom'`\n\nThe position to place the banner - *either* the top or bottom (other values will default to top).\n\n#### options.banner\nType: `String`\n\nThe text to use as a banner. Templated strings are perfectly acceptable and encouraged.\n\n#### options.pattern\nType: `String`\n\nAllows the banner to be added only if the supplied pattern matches.\n\n#### options.linebreak\nType: `Boolean`  \nDefault: `true`\n\nSet `linebreak` to true to add a line break between banner and file content.\n\n#### options.process\nType: `Function`\n\nAllows the banner to be generated for each file using the output of the process function.\n\n\n### Usage Examples\n\n#### Basic Usage\n\nIn this example an `appConfig` is read from a JSON file and used to populate a `banner` template which is then used by `grunt-banner` to place at the top of some files. Each file in the array will have the banner placed on to it and all `.js` files in the `/more-scripts/` folder will have a banner thanks to the `*` wildcard.\n\n```js\nvar appConfig = grunt.file.readJSON( 'app-config.json' ) || {};\ngrunt.initConfig({\n  banner: '/* <%= appConfig.info.name %> - version <%= appConfig.info.version %> - ' +\n          '<%= grunt.template.today(\"dd-mm-yyyy\") %>\\n' +\n          '<%= appConfig.info.description %>\\n ' +\n          '&#169 <%= grunt.template.today(\"yyyy\") %> <%= appConfig.info.author.name %> ' +\n          '- <%= appConfig.info.author.email %> */\\n',\n  usebanner: {\n    dist: {\n      options: {\n        position: 'top',\n        banner: '<%= banner %>'\n      },\n      files: {\n        src: [ 'scripts/main-min.js', 'stylesheets/main-min.css', 'more-scripts/*.js' ]\n      }\n    }\n  }\n})\n```\n\n\n#### Process Usage\n\nBy supplying a process **function** you effectively take control of how the banner is generated, the task is still responsible for placing it. In essence, it replaces the need for a banner object being specified in your grunt config as you are creating it from code for each file. This gives you the flexibility to add file-specific data to your banners.\n\nThis example uses [grunt templating](http://gruntjs.com/api/grunt.template) to generate a banner that references the file name it is being appended to. Run the test cases to see this in action.\n\n```js\nusebanner: {\n  dist: {\n    options: {\n      position: 'top',\n      process: function ( filepath ) {\n        return grunt.template.process(\n          '// banner for file: <%= filename %>', {\n            data: {\n              filename: filepath.match(/\\/([^/]*)$/)[1]\n            }\n          }\n        );\n      }\n    },\n    files: {\n      src: [ 'test/tmp/someProcess.js' ]\n    }\n  }\n}\n```\n\n\n### Notes\n\n`grunt-banner` simply adds the banner to the head or foot of the files that are specified by the array passed to `files.src`, it makes no attempt to see if a banner already exists and it is up to the user to ensure that the file should not already contain a banner. To this end it is recommended to use the [grunt-contrib-clean](https://github.com/gruntjs/grunt-contrib-clean) task and only add banners to built code.\n\n\n## Contributing\n\nIn lieu of a formal style guide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n---\n\nTask submitted by [Matt Styles](http://veryfizzyjelly.com/coding/introducing-grunt-booty) [@personalurban](https://twitter.com/personalurban)\n",
  "readmeFilename": "README.md",
  "_id": "grunt-banner@0.4.0",
  "dist": {
    "shasum": "7814a842ebafc6a349b496dbbc944a070b70ce7f"
  },
  "_from": "grunt-banner@^0.4.0",
  "_resolved": "https://registry.npmjs.org/grunt-banner/-/grunt-banner-0.4.0.tgz"
}
